"use strict";(self.webpackChunktest_site=self.webpackChunktest_site||[]).push([[8760],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),o=n(86010);const r={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(87462),o=n(67294),r=n(86010),i=n(12466),l=n(16550),s=n(91980),c=n(67392),u=n(50012);function p(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function d(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=d(e),[i,l]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[s,c]=f({queryString:n,groupId:a}),[p,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,u.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),g=(()=>{const e=s??p;return m({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),y(e)}),[c,y,r]),tabValues:r}}var g=n(72389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==l&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},i,{className:(0,r.Z)("tabs__item",h.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=y(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",h.tabList)},o.createElement(k,(0,a.Z)({},e,t)),o.createElement(b,(0,a.Z)({},e,t)))}function v(e){const t=(0,g.Z)();return o.createElement(w,(0,a.Z)({key:String(t)},e))}},29882:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(87462),o=(n(67294),n(3905)),r=n(74866),i=n(85162);const l={sidebar_label:"Claiming Behavior"},s="Usage Configurations",c={unversionedId:"Cookbook/drops/customizations/usageConfig",id:"Cookbook/drops/customizations/usageConfig",title:"Usage Configurations",description:"This part of the cookbook contains everything related to claiming behavior and usage configurations. These will range from permissions for different types of claims, to automatically deleting the drop once all the keys have been used.",source:"@site/docs/Cookbook/drops/customizations/usageConfig.md",sourceDirName:"Cookbook/drops/customizations",slug:"/Cookbook/drops/customizations/usageConfig",permalink:"/docs/Cookbook/drops/customizations/usageConfig",draft:!1,editUrl:"https://github.com/keypom/keypom-docs/tree/main/docs/Cookbook/drops/customizations/usageConfig.md",tags:[],version:"current",frontMatter:{sidebar_label:"Claiming Behavior"},sidebar:"Cookbook",previous:{title:"Access Key Marketplace",permalink:"/docs/Cookbook/drops/customizations/saleConfig"},next:{title:"Keys",permalink:"/docs/Cookbook/keys"}},u={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Only New Accounts can Claim",id:"only-new-accounts-can-claim",level:2},{value:"Only Existing Accounts can Claim",id:"only-existing-accounts-can-claim",level:2},{value:"Refunding Deposit when <code>Claim</code> is Called",id:"refunding-deposit-when-claim-is-called",level:2},{value:"Automatically Deleting Drop when Empty",id:"automatically-deleting-drop-when-empty",level:2},{value:"Automatically Withdrawing your Balance",id:"automatically-withdrawing-your-balance",level:2},{value:"Gatekeeping Account Creation",id:"gatekeeping-account-creation",level:2}],d={toc:p},m="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"usage-configurations"},"Usage Configurations"),(0,o.kt)("p",null,"This part of the cookbook contains everything related to claiming behavior and usage configurations. These will range from permissions for different types of claims, to automatically deleting the drop once all the keys have been used. "),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"For the cookbook, you will need the following installed. "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"},"Node JS"),"  "),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/keypom/keypom-js#getting-started"},"Keypom JS SDK"))),(0,o.kt)("admonition",{title:"note",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"These scripts will not run without the proper setup shown in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/Cookbook/welcome#connection-to-near-and-initializing-the-sdk"},"introduction page"),".")),(0,o.kt)("h2",{id:"only-new-accounts-can-claim"},"Only New Accounts can Claim"),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"permissions")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"usage")," config, you can specify whether an account can call ",(0,o.kt)("inlineCode",{parentName:"p"},"claim"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"create_account_and_claim")," or both. Here, the claimer must create a new account as they may only call ",(0,o.kt)("inlineCode",{parentName:"p"},"create_account_and_claim"),". "),(0,o.kt)("p",null,"If no ",(0,o.kt)("inlineCode",{parentName:"p"},"permissions")," are specified, the claimer can use either function."),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { keys } = await createDrop({\n    account: fundingAccount,\n    numKeys: 1,\n    depositPerUseNEAR: "1",\n    config: {\n        usage:{\n            permissions: `create_account_and_claim`\n        }\n    }\n});\n\nconsole.log(keys)\n')))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"only-existing-accounts-can-claim"},"Only Existing Accounts can Claim"),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"permissions")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"usage")," config, you can specify whether an account can call ",(0,o.kt)("inlineCode",{parentName:"p"},"claim"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"create_account_and_claim")," or both. Here, the claimer must have an existing account as they may only call ",(0,o.kt)("inlineCode",{parentName:"p"},"claim"),". "),(0,o.kt)("p",null,"If no ",(0,o.kt)("inlineCode",{parentName:"p"},"permissions")," are specified, the claimer can use either function."),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { keys } = await createDrop({\n    account: fundingAccount,\n    numKeys: 1,\n    depositPerUseNEAR: "1",\n    config: {\n        usage:{\n            permissions: `claim`\n        }\n    }\n});\n\nconsole.log(keys)\n')))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"refunding-deposit-when-claim-is-called"},"Refunding Deposit when ",(0,o.kt)("inlineCode",{parentName:"h2"},"Claim")," is Called"),(0,o.kt)("p",null,"When creating keys for your drop, each is loaded with enough $NEAR to cover the cost of creating an account for each claim. If a user claims with an existing account, this deposit is lost and transferred to the user. If you wish to retain those deposits whenever ",(0,o.kt)("inlineCode",{parentName:"p"},"claim")," is called instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"create_account_and_claim"),", you can use the following. "),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { keys } = await createDrop({\n    account: fundingAccount,\n    numKeys: 1,\n    depositPerUseNEAR: "1",\n    config: {\n        usage:{\n            refundDeposit: true\n        }\n    }\n});\n\nconsole.log(keys)\n')))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"automatically-deleting-drop-when-empty"},"Automatically Deleting Drop when Empty"),(0,o.kt)("p",null,"By default, depleted drops are not deleted unless you manually delete them. To delete them automatically, include the following. "),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { keys } = await createDrop({\n    account: fundingAccount,\n    numKeys: 1,\n    depositPerUseNEAR: "1",\n    config: {\n        usage:{\n            autoDeleteDrop: true\n        }\n    }\n});\n\nconsole.log(keys)\n')))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"automatically-withdrawing-your-balance"},"Automatically Withdrawing your Balance"),(0,o.kt)("p",null,"By default, withdrawing your Keypom balance back into your wallet is only done when call ",(0,o.kt)("inlineCode",{parentName:"p"},"withdrawBalance"),". If you wish to withdraw it once all your drops have been depleted, you can turn on ",(0,o.kt)("inlineCode",{parentName:"p"},"autoDeleteDrop")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"autoWithdraw"),".  "),(0,o.kt)("p",null,"This will ensure that once this drop is empty it is automatically deleted and, assuming it is the final drop on your account, will automatically withdraw your Keypom balance."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This will only automatically withdraw your balance if and only if the last drop you have. If you empty a this drop but it is not the last drop on your account, you will need to manually withdraw your balance. ")),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { keys } = await createDrop({\n    account: fundingAccount,\n    numKeys: 1,\n    depositPerUseNEAR: "1",\n    config: {\n        usage:{\n            autoDeleteDrop: true,\n            autoWithdraw: true\n        }\n    }\n});\n\nconsole.log(keys)\n')))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"gatekeeping-account-creation"},"Gatekeeping Account Creation"),(0,o.kt)("p",null,"When accounts are created with drops using a custom ",(0,o.kt)("a",{parentName:"p",href:"/docs/Cookbook/drops/customizations/dropConfig#using-a-custom-drop-root"},(0,o.kt)("inlineCode",{parentName:"a"},"dropRoot")),", they will be subaccounts of the ",(0,o.kt)("inlineCode",{parentName:"p"},"dropRoot"),"."),(0,o.kt)("p",null,"If you wish to make these subaccounts exclusive, you can gatekeep this process by using ",(0,o.kt)("inlineCode",{parentName:"p"},"accountCreationFields")," to check if the claiming account is coming from your drop. Note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"dropRoot")," account would need to expose a ",(0,o.kt)("inlineCode",{parentName:"p"},"create_account")," function that looks similar to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[payable]\npub fn create_account(&mut self, new_account_id: AccountId, new_public_key: PublicKey, funder: String, keypomArgs: keypom_args) -> Promise {\n        assert!(keypomArgs.funderIdField == "funder_id","Call must come from valid Keypom drop");\n        assert!(funder == EXPECTED_FUNDER == "funder_id","Funder must be approved");\n        ...\n}\n')),(0,o.kt)("p",null,"The following shows a drop where users can only claim with a new account, and only those using your drop can create subaccounts of ",(0,o.kt)("inlineCode",{parentName:"p"},"moonpom.near")),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Creating FC drop that injects accountId into function call arguments\nlet {keys, dropId} = await createDrop({\n    account: fundingAccount,\n    numKeys: 1,\n    config: {\n        usage:{\n            permissions: `create_account_and_claim`,\n            accountCreationFields: {\n                funderIdField: "funder_id"\n            }\n        },\n        dropRoot: "mint-brigade.testnet"\n    },\n    depositPerUseNEAR: "1",\n})\n\nconsole.log(keys)\n')))),(0,o.kt)("p",null,"For more info on injected ",(0,o.kt)("inlineCode",{parentName:"p"},"keypom_args"),", see the ",(0,o.kt)("a",{parentName:"p",href:"/docs/Cookbook/drops/fc#using-and-verifying-injected-keypom-arguments"},(0,o.kt)("inlineCode",{parentName:"a"},"keypom_args"))," section. "),(0,o.kt)("hr",null))}f.isMDXComponent=!0}}]);