"use strict";(self.webpackChunktest_site=self.webpackChunktest_site||[]).push([[7921],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,y=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(y,l(l({ref:t},c),{},{components:n})):o.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var o=n(7294),a=n(6010);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var o=n(7462),a=n(7294),r=n(6010),l=n(2466),i=n(6550),s=n(1980),u=n(7392),c=n(12);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:n}=e;const o=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=p(e),[l,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:r}))),[s,u]=y({queryString:n,groupId:o}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,c.Nk)(n);return[o,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),k=(()=>{const e=s??d;return m({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),b(e)}),[u,b,r]),tabValues:r}}var k=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),o=u[n].value;o!==i&&(d(t),s(o))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},l,{className:(0,r.Z)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function h(e){let{lazy:t,children:n,selectedValue:o}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function v(e){const t=b(e);return a.createElement("div",{className:(0,r.Z)("tabs-container",f.tabList)},a.createElement(g,(0,o.Z)({},e,t)),a.createElement(h,(0,o.Z)({},e,t)))}function w(e){const t=(0,k.Z)();return a.createElement(v,(0,o.Z)({key:String(t)},e))}},9164:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>y,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var o=n(7462),a=(n(7294),n(3905)),r=n(4866),l=n(5162);const i={sidebar_label:"Access Key Marketplace"},s="Sale Configurations",u={unversionedId:"Cookbook/drops/customizations/saleConfig",id:"version-2.0/Cookbook/drops/customizations/saleConfig",title:"Sale Configurations",description:"This part of the cookbook contains everything related to drops, including creating a drop, password protecting it, and utilizing Keypom arguments.",source:"@site/versioned_docs/version-2.0/Cookbook/drops/customizations/saleConfig.md",sourceDirName:"Cookbook/drops/customizations",slug:"/Cookbook/drops/customizations/saleConfig",permalink:"/docs/2.0/Cookbook/drops/customizations/saleConfig",draft:!1,editUrl:"https://github.com/keypom/keypom-docs/tree/main/versioned_docs/version-2.0/Cookbook/drops/customizations/saleConfig.md",tags:[],version:"2.0",frontMatter:{sidebar_label:"Access Key Marketplace"},sidebar:"Cookbook",previous:{title:"Time Configurations",permalink:"/docs/2.0/Cookbook/drops/customizations/timeConfig"},next:{title:"Claiming Behavior",permalink:"/docs/2.0/Cookbook/drops/customizations/usageConfig"}},c={},d=[{value:"Getting Started",id:"getting-started",level:2},{value:"Public Sale Drop",id:"public-sale-drop",level:2},{value:"Allowing Only Certain Users to Buy Keys",id:"allowing-only-certain-users-to-buy-keys",level:2},{value:"Blocking People from a Public Sale",id:"blocking-people-from-a-public-sale",level:2},{value:"Buying Keys from a Public Sale",id:"buying-keys-from-a-public-sale",level:2},{value:"Modifying Sale <code>allowlist</code>",id:"modifying-sale-allowlist",level:2},{value:"Modifying Sale <code>blocklist</code>",id:"modifying-sale-blocklist",level:2}],p={toc:d},m="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sale-configurations"},"Sale Configurations"),(0,a.kt)("p",null,"This part of the cookbook contains everything related to drops, including creating a drop, password protecting it, and utilizing Keypom arguments."),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"For the cookbook, you will need the following installed. "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"},"Node JS"),"  "),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/keypom/keypom-js#getting-started"},"Keypom JS SDK"))),(0,a.kt)("admonition",{title:"note",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"These scripts will not run without the proper setup shown in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.0/Cookbook/welcome#connection-to-near-and-initializing-the-sdk"},"introduction page"),".")),(0,a.kt)("h2",{id:"public-sale-drop"},"Public Sale Drop"),(0,a.kt)("p",null,"A public sale drop is one where you can sell the access keys from a drop to other users. These keys will all have the same properties and can be bought by anyone. The maximum number of keys in the drop can be set using ",(0,a.kt)("inlineCode",{parentName:"p"},"maxNumKeys"),". "),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Create drop with a maximum of 10 keys that can be added by anyone\nconst { keys, dropId } = await createDrop({\n    account: fundingAccount,\n    depositPerUseNEAR: 0.1,\n    config: {\n        sale: {\n            maxNumKeys: 10,\n            pricePerKeyNEAR: 1\n        }\n    }\n});\n\nconsole.log(keys)\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"allowing-only-certain-users-to-buy-keys"},"Allowing Only Certain Users to Buy Keys"),(0,a.kt)("p",null,"A public sale drop can be turned into a more private sale by only allowing certain accounts to purchase keys from the drop. This is done by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"allowlist")," argument. Any ",(0,a.kt)("inlineCode",{parentName:"p"},"accountId")," specified here will be able to buy keys from your drop. If someone not on the list tries to buy from your drop, they will be rejected. "),(0,a.kt)("p",null,"By default, if no ",(0,a.kt)("inlineCode",{parentName:"p"},"allowlist")," is included, then anybody can purchase a key."),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Create drop with a maximum of 10 keys that can be added by benji and min\nconst { keys, dropId } = await createDrop({\n    account: fundingAccount,\n    depositPerUseNEAR: 0.1,\n    config: {\n        sale: {\n            maxNumKeys: 10,\n            pricePerKeyNEAR: 1\n            allowlist: ["benji.testnet", "minqi.testnet"]\n        }\n    }\n});\n\nconsole.log(keys)\n')))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"blocking-people-from-a-public-sale"},"Blocking People from a Public Sale"),(0,a.kt)("p",null,"To protect your public sale, you may also choose to block certain accounts from purchasing keys. This can be done by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"blocklist")," argument. This prohibits select accounts from purchasing keys from your drop. "),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"here that since no ",(0,a.kt)("inlineCode",{parentName:"p"},"allowlist")," is specified, anybody can purchase keys. However, since ",(0,a.kt)("inlineCode",{parentName:"p"},"evil-moon.testnet")," is on the blocklist, they will not be allowed to do so. This means that everybody except for ",(0,a.kt)("inlineCode",{parentName:"p"},"evil-moon.testnet")," has permission to purchase a key. ")),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Create drop with a maximum of 10 keys that can be added anyone but evil-moon\nconst { keys, dropId } = await createDrop({\n    account: fundingAccount,\n    depositPerUseNEAR: 0.1,\n    config: {\n        sale: {\n            maxNumKeys: 10,\n            pricePerKeyNEAR: 1\n            blocklist: ["evil-moon.testnet"]\n        }\n    }\n});\n\nconsole.log(keys)\n')))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"buying-keys-from-a-public-sale"},"Buying Keys from a Public Sale"),(0,a.kt)("p",null,"If you are allowed to buy tickets from a public sale, you can simply create a new key and call ",(0,a.kt)("inlineCode",{parentName:"p"},"addKeys")," on the public sale drop with the ticket price attached to the ",(0,a.kt)("inlineCode",{parentName:"p"},"extraDepositNEAR")," argument."),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// 10 $NEAR ticket price\nconst TICKET_PRICE = "10"\n// Desired sale\'s dropId\nconst SALE_DROP_ID = "1684876169052"\n\n// Generate a random key\nconst {publicKeys} = await generateKeys({\n    numKeys: 1\n});\n\nawait addKeys({\n    account: fundingAccount,\n    publicKeys,\n    dropId: SALE_DROP_ID,\n    extraDepositNEAR: TICKET_PRICE\n})\n')))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},'In its the example above, anybody can buy as many tickets as they\'d like within the limits of the drop. For further customization, you could build a "public sale bot" contract. '),(0,a.kt)("p",{parentName:"admonition"},"This contract would act as an entry point that users interface with and buy tickets from; allowing you to restrict the number of tickets and add further customization. To facilitate this, you would need to ",(0,a.kt)("a",{parentName:"p",href:"#allowing-only-certain-users-to-buy-keys"},"create an ",(0,a.kt)("inlineCode",{parentName:"a"},"allowlist"))," containing the bot contract. ")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"modifying-sale-allowlist"},"Modifying Sale ",(0,a.kt)("inlineCode",{parentName:"h2"},"allowlist")),(0,a.kt)("p",null,"After your public sale drop has been created, you can modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"allowlist")," by adding or removing users from it using ",(0,a.kt)("inlineCode",{parentName:"p"},"addToSaleAllowlist")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"removeFromSaleAllowlist"),". "),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const {dropId} = await createDrop({\n    numKeys: 0,\n    depositPerUseNEAR: 0.1,\n    config: {\n        sale: {\n            maxNumKeys: 2,\n            pricePerKeyNEAR: 1,\n            allowlist: ["evil-moon.testnet"]\n        }\n    }\n});\n\n// Remove evil-moon from allowlist\nawait removeFromSaleAllowlist({\n    account: fundingAccount, \n    dropId, \n    accountIds: ["evil-moon.testnet"]\n});\n\n// Add benji and minqi to allowlist\nawait addToSaleAllowlist({\n    account: fundingAccount, \n    dropId, \n    accountIds: ["benji.testnet", "minqi.testnet"]\n});\n')))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"modifying-sale-blocklist"},"Modifying Sale ",(0,a.kt)("inlineCode",{parentName:"h2"},"blocklist")),(0,a.kt)("p",null,"After your public sale drop has been created, you can modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"blocklist")," by adding or removing users from it using ",(0,a.kt)("inlineCode",{parentName:"p"},"addToSaleBlocklist")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"removeFromSaleBlocklist"),". "),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"SDK",label:"\ud83d\udd11 Keypom SDK",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const {dropId} = await createDrop({\n    numKeys: 0,\n    depositPerUseNEAR: 0.1,\n    config: {\n        sale: {\n            maxNumKeys: 2,\n            pricePerKeyNEAR: 1,\n            blocklist: ["minqi.testnet", "benji.testnet"]\n        }\n    }\n});\n\n// Remove evil-moon benji and minqi from blocklist\nawait removeFromSaleBlocklist({\n    account: fundingAccount, \n    dropId, \n    accountIds: ["benji.testnet", "minqi.testnet"]\n});\n\n// Add evil-moon to blocklist\nawait addToSaleBlocklist({\n    account: fundingAccount, \n    dropId, \n    accountIds: ["evil-moon.testnet"]\n});\n')))),(0,a.kt)("hr",null))}y.isMDXComponent=!0}}]);