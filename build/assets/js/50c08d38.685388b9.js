"use strict";(self.webpackChunktest_site=self.webpackChunktest_site||[]).push([[2046],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},k=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),k=a,m=d["".concat(l,".").concat(k)]||d[k]||u[k]||s;return n?o.createElement(m,r(r({ref:t},p),{},{components:n})):o.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=k;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}k.displayName="MDXCreateElement"},2568:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const s={sidebar_label:"Testing the Drop"},r="Testing the Drop",i={unversionedId:"Tutorials/Advanced/ticketing/drop-test",id:"version-2.0/Tutorials/Advanced/ticketing/drop-test",title:"Testing the Drop",description:"Introduction",source:"@site/versioned_docs/version-2.0/Tutorials/Advanced/ticketing/drop-test.md",sourceDirName:"Tutorials/Advanced/ticketing",slug:"/Tutorials/Advanced/ticketing/drop-test",permalink:"/docs/2.0/Tutorials/Advanced/ticketing/drop-test",draft:!1,editUrl:"https://github.com/keypom/keypom-docs/tree/main/versioned_docs/version-2.0/Tutorials/Advanced/ticketing/drop-test.md",tags:[],version:"2.0",frontMatter:{sidebar_label:"Testing the Drop"},sidebar:"Tutorials",previous:{title:"Creating the Drop",permalink:"/docs/2.0/Tutorials/Advanced/ticketing/drop"},next:{title:"App Design",permalink:"/docs/2.0/Tutorials/Advanced/ticketing/react-outline"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Host Claiming Code",id:"host-claiming-code",level:2},{value:"Testing Logic",id:"testing-logic",level:2},{value:"Wrong Password Check",id:"wrong-password-check",level:3},{value:"Preventing Multiple Entries",id:"preventing-multiple-entries",level:3},{value:"Full Code",id:"full-code",level:2},{value:"Running the Script",id:"running-the-script",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing-the-drop"},"Testing the Drop"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"In the last section you designed and created a drop according to the specifications you learned about in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.0/Tutorials/Advanced/ticketing/architecture#keypom-solution"},"Solution Architecture"),"."),(0,a.kt)("p",null,"In this tutorial, you'll create a generalized method that will determine whether or not to allow someone entry into the event. It will be used to both test the drop logic and power the core functionality of the ticketing app."),(0,a.kt)("p",null,"Starting at the ",(0,a.kt)("inlineCode",{parentName:"p"},"keypom-docs-examples")," directory, navigate to ",(0,a.kt)("inlineCode",{parentName:"p"},"advanced-tutorials/ticket-app-skeleton/utils")," folder and open the ",(0,a.kt)("inlineCode",{parentName:"p"},"allowEntry.js")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd advanced-tutorials/ticket-app-skeleton/utils\n")),(0,a.kt)("p",null,"This should show the following skeleton code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"reference",reference:!0},"https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app-skeleton/utils/allowEntry.js#L1-L14\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"host-claiming-code"},"Host Claiming Code"),(0,a.kt)("p",null,"In order to test the drop logic, a utility function will be created to emulate the host scanning tickets at the door and will be used by the frontend."),(0,a.kt)("p",null,"The primary purpose of this function is to ingest a private key and password, and determine whether or not a ticket is valid. This means it will check for a few conditions before returning a success value. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ticket is valid and has not been scanned yet."),(0,a.kt)("li",{parentName:"ul"},"The password entered by the host was correct and the claim was successful")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"allowEntry")," utility function takes in a private key, and a ",(0,a.kt)("inlineCode",{parentName:"p"},"basePassword"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"reference",reference:!0},"https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/utils/allowEntry.js#L9-L49\n")),(0,a.kt)("h2",{id:"testing-logic"},"Testing Logic"),(0,a.kt)("p",null,"Now that the utility function has been created, it can be used to test the drop logic. This will be done in a new file called ",(0,a.kt)("inlineCode",{parentName:"p"},"testTickDrop.js")," that will live in the same util directory. It will contain two different test functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wrongPasswordCheck")," - This will test the case where the wrong password is used to claim the ticket."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"doubleClaimCheck")," - This is meant to check for invalid tickets. In this case, it will try to claim the same ticket twice in a row.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"reference",reference:!0},"https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app-skeleton/utils/testTickDrop.js#L1-L26\n")),(0,a.kt)("p",null,"With both the drop created utility function defined, some code can be written to test the actual logic to ensure that the ticket claiming process works as expected. This will be broken down into phases, similar to the actual ticketing experience. "),(0,a.kt)("h3",{id:"wrong-password-check"},"Wrong Password Check"),(0,a.kt)("p",null,"The first phase of the ticketing experience can be labelled as ",(0,a.kt)("inlineCode",{parentName:"p"},"pre-entry"),", when the attendee is looking to enter the event. Here, you want to ensure that only the host can allow them in, meaning the first key use must only be claimable with the correct password."),(0,a.kt)("p",null,"The following code can be used to test this logic, following the drop creation. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"reference",reference:!0},"https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/utils/testTickDrop.js#L5-L30\n")),(0,a.kt)("p",null,"It's expected that after claiming with the incorrect password, ",(0,a.kt)("inlineCode",{parentName:"p"},"allowEntry")," will return ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," since the key use remains at 1. However, once the correct password is provided, the ",(0,a.kt)("inlineCode",{parentName:"p"},"allowEntry")," function should return ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". In the tests, an ",(0,a.kt)("inlineCode",{parentName:"p"},"assert")," function is used to ensure the proper behavior."),(0,a.kt)("h3",{id:"preventing-multiple-entries"},"Preventing Multiple Entries"),(0,a.kt)("p",null,"Once an attendee has been scanned into the event, they may try to give their ticket to someone else. To test and prevent this, ",(0,a.kt)("inlineCode",{parentName:"p"},"allowEntry")," can be called multiple times on the same ticket. It is expected that the first call should return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," but once it scans the same ticket again, ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," should be returned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"reference",reference:!0},"https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/utils/testTickDrop.js#L32-L57\n")),(0,a.kt)("p",null,"With the drop functionality tested, you can be confident in the logic behind the scenes and focus on the app behavior. "),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"full-code"},"Full Code"),(0,a.kt)("p",null,"Now that everything has been put together, the final code can be seen below."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Full Testing Code"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"reference",reference:!0},"https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/utils/testTickDrop.js#L1-L75\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"running-the-script"},"Running the Script"),(0,a.kt)("p",null,"Here, you'll learn how to run the code that was just covered, and what to expect. It's assumed that you have already cloned the code from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/keypom/keypom-docs-examples"},"Keypom Docs Examples")," repo."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Prior to running these scripts, ensure you replace all instances of ",(0,a.kt)("inlineCode",{parentName:"p"},"minqi.testnet")," with an account found in your ",(0,a.kt)("inlineCode",{parentName:"p"},"~/.near-credentials")," folder")),(0,a.kt)("p",null,"To run the script, run the following command inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"keypom-docs-examples/advanced-tutorials/ticket-app-skeleton")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test-ticket-drop\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If you'd like to run the already completed code found in the ",(0,a.kt)("inlineCode",{parentName:"p"},"ticket-app")," directory instead of the skeleton code, run the same ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn test-ticket-drop")," command but inside of the ",(0,a.kt)("inlineCode",{parentName:"p"},"keypom-docs-examples/advanced-tutorials/ticket-app")," directory instead.")),(0,a.kt)("p",null,"This should return a successful test after outputting logs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Password Test Responses:\nExpected false, got: false\nExpected true, got: true\n\nDouble Claim Test Responses:\nExpected true, got: true\nExpected false, got: false\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Full Script Output"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Retrying transaction v2.keypom.testnet:2JdTtqWLNqLUjBL9CYJ1qkdUtYpDLXydvnCfHiW3LG3S with new nonce.\nReceipts: DL3AwUHW22wqEvJ24Soh39Zgsa8iQhyNNKsqzfUggDCn, Dt1yEoGZ36avyKqwF82GL54emJkfmUx2AM3fUtkhC1Vv\n    Log [v2.keypom.testnet]: Current Block Timestamp: 1680294425065581261\n    Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000\n    Log [v2.keypom.testnet]: Total required storage Yocto 16330000000000000000000\n    Log [v2.keypom.testnet]: Current balance: 3.5921299,\n            Required Deposit: 0.2578263,\n            total_required_storage: 0.01633,\n            Drop Fee: 0,\n            Key Fee: 0 Total Key Fee: 0,\n            allowance: 0.0404963 total allowance: 0.0404963,\n            access key storage: 0.001 total access key storage: 0.001,\n            deposits less none FCs: 0.1 total deposits: 0.1 lazy registration: false,\n            deposits for FCs: 0.1 total deposits for FCs: 0.1,\n            uses per key: 2\n            None FCs: 1,\n            length: 1\n            GAS to attach: 100000000000000\n    Log [v2.keypom.testnet]: New user balance 3.3343036\n    Log [v2.keypom.testnet]: Fees collected 0\nRetrying transaction nft-v2.keypom.testnet:2iHrE9ooY2N4kUn9eqsScAyNjXkRkUBiQdzxYsXwFawm with new nonce.\nReceipts: 6jzxKRXmGjrtSKP9V38puWLZPcDHaVYRrohtj29rsMxR, FCmjrSPxuyKEXdghJAkrz8H8AH3GaCPnceoZKuHazmrN\n    Log [v2.keypom.testnet]: Current Block Timestamp: 1680294427597789158\n    Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000\n    Log [v2.keypom.testnet]: Total required storage Yocto 16330000000000000000000\n    Log [v2.keypom.testnet]: Current balance: 3.6040689,\n            Required Deposit: 0.2578263,\n            total_required_storage: 0.01633,\n            Drop Fee: 0,\n            Key Fee: 0 Total Key Fee: 0,\n            allowance: 0.0404963 total allowance: 0.0404963,\n            access key storage: 0.001 total access key storage: 0.001,\n            deposits less none FCs: 0.1 total deposits: 0.1 lazy registration: false,\n            deposits for FCs: 0.1 total deposits for FCs: 0.1,\n            uses per key: 2\n            None FCs: 1,\n            length: 1\n            GAS to attach: 100000000000000\n    Log [v2.keypom.testnet]: New user balance 3.3462426\n    Log [v2.keypom.testnet]: Fees collected 0\nRetrying transaction nft-v2.keypom.testnet:CysD3CnodxvarnxUpQKKWWV1x9uhjEkCbWosy1DuDo7D with new nonce.\n\n\n    Ticket Links:\n\n    http://localhost:1234/v2.keypom.testnet/3aJq6s8pNYFGbuUVG5fj7nJ9bpfKZD7iH4oak27yZnjQytcyCAFMioJEZrVJBf3itMgrs3gm8U1UszewfhXbfKUH\n\n\n\n\n    Ticket Links:\n\n    http://localhost:1234/v2.keypom.testnet/2KxZarBh9hWy7JZGDvsJhdzP8Q3JtCy7ocZ4hvohHKEsSNjxTx3LWd8EDpHNfD2du8MQVftCNJKRCp99At1qigQU\n\n\nClaiming with wrong password...\nReceipt: BHH2ENLdWLpYDQDD8SmgbAXzVFGi9odnGwhgHxg6ifCR\n    Log [v2.keypom.testnet]: Beginning of process claim used gas: 479192976105 prepaid gas: 100000000000000\n    Log [v2.keypom.testnet]: passed global check\n    Log [v2.keypom.testnet]: hashed password: [97, 68, 238, 197, 167, 108, 73, 163, 74, 105, 140, 127, 22, 87, 3, 98, 76, 179, 110, 208, 118, 51, 58, 3, 88, 44, 22, 240, 45, 89, 85, 65]\n    Log [v2.keypom.testnet]: actualPass password: [61, 214, 44, 95, 159, 234, 2, 185, 182, 48, 134, 31, 65, 88, 184, 51, 51, 13, 201, 173, 75, 158, 56, 59, 33, 46, 185, 178, 239, 3, 44, 94] cur use: 1\n    Log [v2.keypom.testnet]: Incorrect password. Decrementing allowance by 1244250690277300000000. Used GAS: 2442506902773\n    Log [v2.keypom.testnet]: Allowance is now 39252063130497100000000\n    Log [v2.keypom.testnet]: Invalid claim. Returning.\nClaim has failed, check password\nclaiming with correct password...\nReceipt: 4gAycg2B1jVNoJtUT3snHWDA1Ffdkxt1oPu8vH1TwoSC\n    Log [v2.keypom.testnet]: Beginning of process claim used gas: 479192976105 prepaid gas: 100000000000000\n    Log [v2.keypom.testnet]: passed global check\n    Log [v2.keypom.testnet]: hashed password: [61, 214, 44, 95, 159, 234, 2, 185, 182, 48, 134, 31, 65, 88, 184, 51, 51, 13, 201, 173, 75, 158, 56, 59, 33, 46, 185, 178, 239, 3, 44, 94]\n    Log [v2.keypom.testnet]: actualPass password: [61, 214, 44, 95, 159, 234, 2, 185, 182, 48, 134, 31, 65, 88, 184, 51, 51, 13, 201, 173, 75, 158, 56, 59, 33, 46, 185, 178, 239, 3, 44, 94] cur use: 1\n    Log [v2.keypom.testnet]: passed local check\n    Log [v2.keypom.testnet]: Key usage last used: 0 Num uses: 2 (before)\n    Log [v2.keypom.testnet]: Key has 1 uses left. Decrementing allowance by 10000000000000000000000. Allowance left: 29252063130497100000000\n    Log [v2.keypom.testnet]: Total storage freed: 0. Initial storage: 33083530. Final storage: 33083530\n    Log [v2.keypom.testnet]: Empty function call. Returning.\nReceipts: D2TGQDXYR4um28CgTt8Z1aU1LMSABMChW9MZJPfVBcpd, 7FKbgHx6eFnfMM15B1Tw7U8wpeQe2WKwYUQG7Hbqe69L\n    Log [v2.keypom.testnet]: Current Block Timestamp: 1680294442058016014\n    Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000\n    Log [v2.keypom.testnet]: Total required storage Yocto 16330000000000000000000\n    Log [v2.keypom.testnet]: Current balance: 3.6160078,\n            Required Deposit: 0.2578263,\n            total_required_storage: 0.01633,\n            Drop Fee: 0,\n            Key Fee: 0 Total Key Fee: 0,\n            allowance: 0.0404963 total allowance: 0.0404963,\n            access key storage: 0.001 total access key storage: 0.001,\n            deposits less none FCs: 0.1 total deposits: 0.1 lazy registration: false,\n            deposits for FCs: 0.1 total deposits for FCs: 0.1,\n            uses per key: 2\n            None FCs: 1,\n            length: 1\n            GAS to attach: 100000000000000\n    Log [v2.keypom.testnet]: New user balance 3.3581815\n    Log [v2.keypom.testnet]: Fees collected 0\n\n\n    Ticket Links:\n\n    http://localhost:1234/v2.keypom.testnet/2LNJU2adYHgvyuczoNFkvdL92vuunNCESaZiWYh6cQJXcwVSJpHqgQpGVUHsEDDee2oQrSELAkRGPeYroW6hoPaN\n\n\nClaiming with correct password...\nReceipt: G7y6MWapxNwCCmCPAQ6iRWdvT292dq8hWp8ZQAnTbXwQ\n    Log [v2.keypom.testnet]: Beginning of process claim used gas: 479192976105 prepaid gas: 100000000000000\n    Log [v2.keypom.testnet]: passed global check\n    Log [v2.keypom.testnet]: hashed password: [105, 193, 27, 134, 73, 227, 30, 80, 12, 73, 201, 126, 217, 0, 80, 239, 38, 5, 216, 62, 44, 177, 19, 137, 73, 50, 159, 32, 38, 11, 59, 94]\n    Log [v2.keypom.testnet]: actualPass password: [105, 193, 27, 134, 73, 227, 30, 80, 12, 73, 201, 126, 217, 0, 80, 239, 38, 5, 216, 62, 44, 177, 19, 137, 73, 50, 159, 32, 38, 11, 59, 94] cur use: 1\n    Log [v2.keypom.testnet]: passed local check\n    Log [v2.keypom.testnet]: Key usage last used: 0 Num uses: 2 (before)\n    Log [v2.keypom.testnet]: Key has 1 uses left. Decrementing allowance by 10000000000000000000000. Allowance left: 30496313820774400000000\n    Log [v2.keypom.testnet]: Total storage freed: 0. Initial storage: 33085324. Final storage: 33085324\n    Log [v2.keypom.testnet]: Empty function call. Returning.\nclaiming the same key twice...\nKey has already been scanned. Admission denied\n\n        Password Test Responses:\n        Expected false, got: false\n        Expected true, got: true\n\n        Double Claim Test Responses:\n        Expected true, got: true\n        Expected false, got: false\n\n\u2728  Done in 26.50s.\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"So far, you've learned how to set up your React app, as well as break down the ticketing system into functional requirements. You then took those requirements and wrote a script to create the drop."),(0,a.kt)("p",null,"In the next tutorial, the ticketing process will be broken down into stages for both the user side and event organizer side. From there, the flow of the app, and the Keypom variables that control it, can be established."))}u.isMDXComponent=!0}}]);